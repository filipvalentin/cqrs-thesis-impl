@page "/reset-password"
@using MudBlazor
@using Lunatic.UI.Contracts
@using Lunatic.UI.Models.ViewModels
@using Lunatic.UI.Models.Dtos
@using System.Text.RegularExpressions
@inject ISnackbar Snackbar

<PageTitle>Lunatic: Reset password</PageTitle>

<MudPaper Height="100%" Class="p-2 d-flex flex-column flex-grow-1 justify-center align-center" Elevation="0" MinHeight="20em">
	<MudPaper Class="d-flex flex-column align-center p-4" Width="fit-content">

		<MudText Typo="Typo.h6">
			Reset your password
		</MudText>

		<MudDivider Style="height:3px" />

		<MudForm @bind-IsValid="isValidPasswordForm">

			<MudTextField @bind-Value="NewPassword" Label="New Password" Required="true" InputType="InputType.Password"
						  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" />
			<MudTextField T="string" Label="Confirm Password" Required="true" InputType="InputType.Password"
						  Validation="@(new Func<string, string>(PasswordMatch))" />
			<MudPaper Class="d-flex flex-row justify-space-around bg-transparent mt-2" Elevation="0">
				<MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary"
						   Disabled="@(!isValidPasswordForm)"
						   OnClick="@(async ()=>{ await SendResetPasswordRequest();
		 											OldPassword = "";
		 											NewPassword = "";})">
					Change
				</MudButton>
			</MudPaper>
		</MudForm>
	</MudPaper>
</MudPaper>

@code {
	[SupplyParameterFromQuery] public string Token { get; set; } = "";

	private bool isValidPasswordForm { get; set; } = false;
	private string OldPassword { get; set; } = "";
	private string NewPassword { get; set; } = "";

	[Inject] IAuthenticationService AuthenticationService { get; set; } = null!;
}

@functions {
	private async Task SendResetPasswordRequest() {
		var result = await AuthenticationService.ConfirmPassword(new() {Token = Token, NewPassword = NewPassword });
		if (result.Success) {
			Snackbar.Add("Your password has been changed!", Severity.Success);
		}
		else {
			Snackbar.Add($"There was a problem with your request: {result.GetErrorsString()}", Severity.Error);
		}
	}

	private IEnumerable<string> PasswordStrength(string pw) {
		if (string.IsNullOrWhiteSpace(pw)) {
			yield return "Password is required!";
			yield break;
		}
		if (pw.Length < 8)
			yield return "Password must be at least of length 8";
		if (!Regex.IsMatch(pw, @"[A-Z]"))
			yield return "Password must contain at least one capital letter";
		if (!Regex.IsMatch(pw, @"[a-z]"))
			yield return "Password must contain at least one lowercase letter";
		if (!Regex.IsMatch(pw, @"[0-9]"))
			yield return "Password must contain at least one digit";
	}
	private string PasswordMatch(string arg) {
		if (NewPassword != arg)
			return "Passwords don't match";
		return null;
	}

}
